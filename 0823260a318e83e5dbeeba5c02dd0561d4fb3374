{
  "comments": [
    {
      "key": {
        "uuid": "7a96c907_746cd035",
        "filename": "persistence-api/src/main/java/org/opendaylight/persistence/dao/BaseDao.java",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "Identifiable (introduced in https://git.opendaylight.org/gerrit/#/c/14943/) looks awfully lot like the Identifiable in yangtools-concepts. I think we can share the same concept. We just need a good place :)",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_745db046",
        "filename": "persistence-api/src/main/java/org/opendaylight/persistence/dao/BaseDao.java",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 3205
      },
      "writtenOn": "2015-02-08T05:19:55Z",
      "side": 1,
      "message": "I do agree we need a good place. Actually, all code we put in persistence.util is code that would better fit in a more general project because they represent utility classes that could be used at all application layers – not necessarily in persistence, like the Converter interface. Is the yangtools project the right one to put all general-purpose classes?\n\nThe Identifiable we propose and the one from yangtools-concepts have the same purpose, and we definitely could use the one from yangtools. I would like to describe the only difference they have to see if it is possible to bring it to the one from yangtools-concepts. However, we would benefit from the one in yangtools-concepts because if auto-generated yang-modeled objects implement Identifiable, they would already fit for persistence, which is really useful.\n\nThis Identifiable is typed with the object that is identified to add an extra layer of type safety. For example, assume we have the following objects:\n\npublic class MyObjectA implements Identifiable\u003cMyObjectA, Long\u003e {\n   …\n}\n\npublic class MyObjectB implements Identifiable\u003cMyObjectB, Long\u003e {\n   …\n}\n\nBoth objects use Long as the Id value, however we could not mistakenly mix them:\n\npublic interface MyServiceA {\n    public void doSomething(Id\u003cMyObjectA, Long\u003e id);\n}\n\nId\u003cMyObjectA, Long\u003e idA \u003d Id.valueOf(1);\nId\u003cMyObjectB, Long\u003e idB \u003d Id.valueOf(1);\nLong someNumericValue \u003d 1;\n\nmyServiceA.doSomething(someNumericValue); // This would cause a compilation error because and Id type is expected\n\nmyServiceA.doSomething(idB); // This would cause a compilation error because an Id of MyObjectB is expected.\n\nmyServiceA.doSomething(idA); // This would work.\nSo we cannot mix Id types with regular types (Like the Long in the example above) and we cannot mix Id types from different objects.\n\nDo you think it is possible to add this to Identifiable?",
      "parentUuid": "7a96c907_746cd035",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_bd5d5b7b",
        "filename": "persistence-api/src/main/java/org/opendaylight/persistence/dao/BaseDao.java",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 2211
      },
      "writtenOn": "2015-02-09T20:06:58Z",
      "side": 1,
      "message": "I could place the generic objects in a suitable place if we identify a place.",
      "parentUuid": "7a96c907_745db046",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_f196b23e",
        "filename": "persistence-api/src/main/java/org/opendaylight/persistence/dao/BaseDao.java",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 3205
      },
      "writtenOn": "2015-02-07T00:45:20Z",
      "side": 1,
      "message": "Using public modifier in interfaces generates a minor issue in Sonar.",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 10
      },
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_7d53536b",
        "filename": "persistence-api/src/main/java/org/opendaylight/persistence/dao/BaseDao.java",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 2211
      },
      "writtenOn": "2015-02-09T20:06:58Z",
      "side": 1,
      "message": "Will change.",
      "parentUuid": "7a96c907_f196b23e",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 10
      },
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_14754cf9",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/SortSpecification.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "ArrayList default size is 10, which may lead to sparse arrays.",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_1456ac2a",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/SortSpecification.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 3205
      },
      "writtenOn": "2015-02-08T05:19:55Z",
      "side": 1,
      "message": "Are you suggesting to use a LinkedList instead? I guess LinkedList fits better when the capacity cannot be estimated.",
      "parentUuid": "7a96c907_14754cf9",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_1d91eff0",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/SortSpecification.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-09T20:37:21Z",
      "side": 1,
      "message": "My suggestion would be to specify a lower initial capacity, may 2 or three. Another approach would be to create a Builder, which could perform a trimToSize() (or ImmutableList.copyOf()) when the specification is known to be complete.",
      "parentUuid": "7a96c907_1456ac2a",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_d462843d",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/SortSpecification.java",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "How hot is this method expected to be? It may be good to create just one view if it is hot enough.",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_bdd47bbd",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/SortSpecification.java",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 2211
      },
      "writtenOn": "2015-02-09T20:06:58Z",
      "side": 1,
      "message": "Are you suggesting that we dont use Collections.unmodifiable and have a set way of ordering sort components ?",
      "parentUuid": "7a96c907_d462843d",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_3d8e2bd1",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/SortSpecification.java",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-09T20:37:21Z",
      "side": 1,
      "message": "If this method is hot, you may want to dedicate a field which would hold the unmodifiable view, e.g. have:\n\nprivate static final List\u003cSortComponent\u003cT\u003e\u003e publicSortCompontes \u003d Collections.unmodifiableList(this.components);\n\nand then return just that here. Again, this depends wildly on the expected usage patterns.",
      "parentUuid": "7a96c907_bdd47bbd",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_3472c811",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/SortSpecification.java",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "Can you use Guava\u0027s Objects.ToStringHelper here?",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_91972e3a",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/page/MarkPageRequest.java",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 3205
      },
      "writtenOn": "2015-02-07T00:45:20Z",
      "side": 1,
      "message": "Nested enum types are implicitly static. It is permissable to explicitly declare a nested enum type to be static.\n\nThis will cause a minor issue in Sonar.",
      "range": {
        "startLine": 141,
        "startChar": 11,
        "endLine": 141,
        "endChar": 17
      },
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_b45d787b",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/page/Page.java",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "What do you think about JSR305 @Nonnull? It may be useful for static analysis...",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_f467804b",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/page/Page.java",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "Guava\u0027s Preconditions.checkNotNull() is nice here, as it can be used directly in initilization like ...",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_7453706b",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/page/Page.java",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "this can lead to memory leak, if a user decides to use something like:\n\nPage p1 \u003d new Page(...);\nPage p2 \u003d new Page(..., p1.getData());\nPage p3 \u003d new Page(..., p2.getData());\n...\n\nGuava\u0027s ImmutableList.copyOf() checks if the input is already an Immutablelist before creating a copy. Immutability has the added benefit of making sure the caller cannot modify the list at some point in the future.",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_94587c8b",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/page/Page.java",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "... this:\n\nthis.request \u003d Preconditions.checkNotNull(pageRequest, \"pageRequest cannot be null\");",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_144c6cc7",
        "filename": "persistence-util/persistence-util-common/src/main/java/org/opendaylight/persistence/util/common/type/page/Page.java",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "return this.data.isEmpty()\n\ndata is already a collection, so forwarding .isEmpty() is more efficient. Note that some List implementations may not have an efficient size() method.",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_344968b7",
        "filename": "persistence-util/persistence-util-common/src/test/java/org/opendaylight/persistence/util/common/type/page/PageTest.java",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "for this case, it would be nice if we had a Page constructor, which would perform the list allocation. I am not sure if that would be useful for a typical user.",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_b43ed8d8",
        "filename": "persistence-util/persistence-util-common/src/test/java/org/opendaylight/persistence/util/common/type/page/PageTest.java",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 3205
      },
      "writtenOn": "2015-02-08T05:19:55Z",
      "side": 1,
      "message": "Since the page is immutable (It will truly be with your suggestion of making a copy of the data), allocating internally would generate an empty page. Subclases of page offer a factory method to create an empty page.",
      "parentUuid": "7a96c907_344968b7",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_d4c92427",
        "filename": "persistence-util/persistence-util-common/src/test/java/org/opendaylight/persistence/util/common/type/page/PageTest.java",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "This could be broken into two separate text cases, without the need for ThrowableTester (unless it has some benefits I am ignorant of) with:\n\n@Test(expect\u003dNullPointerException.class)",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_542754ca",
        "filename": "persistence-util/persistence-util-common/src/test/java/org/opendaylight/persistence/util/common/type/page/PageTest.java",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 3205
      },
      "writtenOn": "2015-02-08T05:19:55Z",
      "side": 1,
      "message": "These cases could be implemented as you suggest, and they would be easier to read.\nThrowableTester was introduced to narrow the lines of code that should throw the exception we expect. For example:\n\n@Test(expect\u003dNullPointerException)\npublic void myTest() {\n  prepareObjectToTest;\n  executeMethodThatShouldThrowException;\n}\n\nif \"prepareObjectToTest\" happens to throw NullPointerException, the test would pass, however that would be an error in the test that should be fixed. Using ThrowableTester adds a little bit more of lines of code but it allows the test to fail in lines we don\u0027t expect to throw exceptions.\nSo, ThrowableTester could be used when preparing the object to test requires a little bit more lines of code.",
      "parentUuid": "7a96c907_d4c92427",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_7d8833c5",
        "filename": "persistence-util/persistence-util-common/src/test/java/org/opendaylight/persistence/util/common/type/page/PageTest.java",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 2211
      },
      "writtenOn": "2015-02-09T21:18:02Z",
      "side": 1,
      "message": "The example mentioned above is perfectly valid. However, for these test cases in question, I think we could split.",
      "parentUuid": "7a96c907_542754ca",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_f4cea02d",
        "filename": "persistence-util/persistence-util-common/src/test/java/org/opendaylight/persistence/util/common/type/page/PageTest.java",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-02-07T21:26:32Z",
      "side": 1,
      "message": "If this represents something a user of Page would do, then it would be nice to have a varargs constructor of Page:\n\nPage(R pageRequest, D... data) {\n    this(pageRequst, Arrays.asList(data);\n}",
      "revId": "0823260a318e83e5dbeeba5c02dd0561d4fb3374",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}