{
  "comments": [
    {
      "key": {
        "uuid": "7a96c907_dccdb486",
        "filename": "persistence-api/src/main/java/org/opendaylight/persistence/dao/query/DeleteQuery.java",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 2211
      },
      "writtenOn": "2015-02-18T06:40:39Z",
      "side": 1,
      "message": "why return null ? Can we change the return type to void instead ?",
      "revId": "5d265f02353e69089bfc049686760f4dcf715944",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_d21fdb06",
        "filename": "persistence-api/src/main/java/org/opendaylight/persistence/dao/query/DeleteQuery.java",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 3205
      },
      "writtenOn": "2015-02-18T18:32:42Z",
      "side": 1,
      "message": "void cannot be used as a generic type, that is the reason Void was added.",
      "parentUuid": "7a96c907_dccdb486",
      "revId": "5d265f02353e69089bfc049686760f4dcf715944",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_926713b7",
        "filename": "persistence-api/src/main/java/org/opendaylight/persistence/dao/query/QueryLoggerDecorator.java",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 2508
      },
      "writtenOn": "2015-02-18T18:39:08Z",
      "side": 1,
      "message": "Consider avoiding cost of string concatenation (and make it easier to read the full message) with formatted logging calls such as the following alternative for this line:\n\nLOGGER.debug(\"Query {} generated result {} in {} ms\", queryClass.getSimpleName(), result, Long.valueOf(endTime - startTime);\n\n\nAnd consider guarding logger calls with appropriate enable check to avoid cost of other method calls when debugging is not actually enabled, e.g.\n\nif(logger.isDebugEnabled()) {\n   ...\n}",
      "revId": "5d265f02353e69089bfc049686760f4dcf715944",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_12af8395",
        "filename": "persistence-api/src/main/java/org/opendaylight/persistence/dao/query/QueryLoggerDecorator.java",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 3205
      },
      "writtenOn": "2015-02-18T18:57:42Z",
      "side": 1,
      "message": "Thanks for the suggestion. It is definitely easier to read.\n\nAbout \"if(logger.isDebugEnabled())\", I would expect the implementation to check whether a logging level is enabled before doing any work. Otherwise consumers would end up adding \"if(logger.isDebugEnabled())\" all over the place. What do you think?",
      "parentUuid": "7a96c907_926713b7",
      "revId": "5d265f02353e69089bfc049686760f4dcf715944",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_32071f84",
        "filename": "persistence-api/src/main/java/org/opendaylight/persistence/dao/query/QueryLoggerDecorator.java",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 2508
      },
      "writtenOn": "2015-02-18T19:44:01Z",
      "side": 1,
      "message": "With the if(enabled) check you are still going to pay for that each time whether logging is at that level or not (it is not optimized out). So it is a tradeoff of that call cost vs. whatever you might be doing in logger.debug(...) that might not get used. \n\nThe Clustering code\u0027s convention is just to include the if(enabled) check everywhere even if the logging is simple/cheap. \n\nI think it is fine if you didn\u0027t do this check and instead focused on the string formatting vs. concatenation change and selectively apply if(enabled) when you know there is some costly method call in the message computation.",
      "parentUuid": "7a96c907_12af8395",
      "revId": "5d265f02353e69089bfc049686760f4dcf715944",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}